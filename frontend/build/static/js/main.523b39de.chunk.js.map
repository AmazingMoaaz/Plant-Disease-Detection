{"version":3,"sources":["plantIcons/PlantIcon1.png","plantIcons/PlantIcon2.png","plantIcons/PlantIcon3.png","plantIcons/PlantIcon4.png","backgroundImage.png","logo.PNG","ModelSelection.js","ImageUpload.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","appbar","background","boxShadow","color","grow","flexGrow","title","textAlign","fontWeight","header","marginBottom","spacing","buttonContainer","display","justifyContent","gap","mainContainer","backgroundImage","concat","backgroundRepeat","backgroundSize","backgroundPosition","minHeight","flexDirection","padding","plantIcon","width","height","ModelSelection","classes","navigate","useNavigate","handleModelSelect","modelId","_jsxs","React","Fragment","children","_jsx","AppBar","position","className","Toolbar","Typography","variant","noWrap","Avatar","src","cblogo","Container","maxWidth","Grid","container","alignItems","item","xs","IconButton","circularButton","onClick","PlantIcon1","alt","PlantIcon2","PlantIcon3","PlantIcon4","text","imageCard","margin","backgroundColor","borderRadius","imageCardEmpty","content","input","detail","cardMedia","maxHeight","resultsContainer","marginTop","ImageUpload","selectedModel","useParams","selectedFile","setSelectedFile","useState","preview","setPreview","isLoading","setIsLoading","error","setError","data","setData","inputRef","useRef","cameraInputRef","onSelectFile","e","file","target","files","URL","createObjectURL","async","formData","FormData","append","res","fetch","method","body","ok","Error","result","json","err","message","sendFile","useEffect","edge","ArrowBackIcon","disableGutters","Card","CardActionArea","CardMedia","component","image","CardContent","style","handleCameraClick","current","setAttribute","click","CameraAltIcon","fontSize","ref","type","accept","capture","onChange","CloudUploadIcon","TableContainer","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","class","parseFloat","confidence","toFixed","CircularProgress","Button","clearData","startIcon","ClearIcon","ImageUploadWrapper","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,MAA0B,uCCA1B,MAA0B,uCCA1B,MAA0B,uCCA1B,MAA0B,uCCA1B,MAA0B,4CCA1B,MAA0B,iC,OCWzC,MAAMA,EAAYC,aAAYC,IAAK,CACjCC,OAAQ,CACNC,WAAY,UACZC,UAAW,OACXC,MAAO,SAETC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLD,SAAU,EACVE,UAAW,OACXC,WAAY,YACZL,MAAO,SAETM,OAAQ,CACNC,aAAcX,EAAMY,QAAQ,GAC5BR,MAAO,QACPI,UAAW,UAEbK,gBAAiB,CACfC,QAAS,OACTC,eAAgB,SAChBC,IAAKhB,EAAMY,QAAQ,IAErBK,cAAe,CACbC,gBAAgB,OAADC,OAASD,EAAe,KACvCE,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,SACpBC,UAAW,QACXT,QAAS,OACTU,cAAe,SACfT,eAAgB,SAChBU,QAASzB,EAAMY,QAAQ,IAEzBc,UAAW,CACTC,MAAO,IACPC,OAAQ,SAwDGC,MApDQA,KACrB,MAAMC,EAAUhC,IACViC,EAAWC,cAEXC,EAAqBC,IACzBH,EAAS,iBAADZ,OAAkBe,GAAU,EAGtC,OACEC,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAACC,IAAM,CAACC,SAAS,SAASC,UAAWZ,EAAQ7B,OAAOqC,SAClDH,eAACQ,IAAO,CAAAL,SAAA,CACNC,cAACK,IAAU,CAACF,UAAWZ,EAAQvB,MAAOsC,QAAQ,KAAKC,QAAM,EAAAR,SAAC,6BAG1DC,cAAA,OAAKG,UAAWZ,EAAQzB,OACxBkC,cAACQ,IAAM,CAACC,IAAKC,SAGjBV,cAACW,IAAS,CAACC,SAAS,KAAKT,UAAWZ,EAAQb,cAAcqB,SACxDH,eAACiB,IAAI,CAACC,WAAS,EAACzC,QAAS,EAAGG,eAAe,SAASuC,WAAW,aAAaZ,UAAWZ,EAAQjB,gBAAgByB,SAAA,CAC7GC,cAACa,IAAI,CAACG,MAAI,EAACC,GAAI,GAAId,UAAWZ,EAAQpB,OAAO4B,SAC3CC,cAACK,IAAU,CAACC,QAAQ,KAAIP,SAAC,wBAI3BC,cAACa,IAAI,CAACG,MAAI,EAAAjB,SACRC,cAACkB,IAAU,CAACf,UAAWZ,EAAQ4B,eAAgBC,QAASA,IAAM1B,EAAkB,UAAW,aAAW,SAAQK,SAC5GC,cAAA,OAAKS,IAAKY,EAAYC,IAAI,UAAUnB,UAAWZ,EAAQJ,gBAG3Da,cAACa,IAAI,CAACG,MAAI,EAAAjB,SACRC,cAACkB,IAAU,CAACf,UAAWZ,EAAQ4B,eAAgBC,QAASA,IAAM1B,EAAkB,UAAW,aAAW,SAAQK,SAC5GC,cAAA,OAAKS,IAAKc,EAAYD,IAAI,UAAUnB,UAAWZ,EAAQJ,gBAG3Da,cAACa,IAAI,CAACG,MAAI,EAAAjB,SACRC,cAACkB,IAAU,CAACf,UAAWZ,EAAQ4B,eAAgBC,QAASA,IAAM1B,EAAkB,UAAW,aAAW,SAAQK,SAC5GC,cAAA,OAAKS,IAAKe,EAAYF,IAAI,UAAUnB,UAAWZ,EAAQJ,gBAG3Da,cAACa,IAAI,CAACG,MAAI,EAAAjB,SACRC,cAACkB,IAAU,CAACf,UAAWZ,EAAQ4B,eAAgBC,QAASA,IAAM1B,EAAkB,UAAW,aAAW,SAAQK,SAC5GC,cAAA,OAAKS,IAAKgB,EAAYH,IAAI,UAAUnB,UAAWZ,EAAQJ,uBAKhD,E,iLCnFrB,MAAM5B,EAAYC,aAAYC,IAAK,CACjCK,KAAM,CACJC,SAAU,GAEZ2D,KAAM,CACJ7D,MAAO,QACPI,UAAW,UAEbP,OAAQ,CACNC,WAAY,UACZC,UAAW,OACXC,MAAO,SAETa,cAAe,CACbC,gBAAgB,OAADC,OAASD,EAAe,KACvCE,iBAAkB,YAClBE,mBAAoB,SACpBD,eAAgB,QAChBO,OAAQ,OACRd,QAAS,OACTC,eAAgB,SAChBuC,WAAY,UAEdY,UAAW,CACTC,OAAQ,OACRhB,SAAU,IACViB,gBAAiB,cACjBjE,UAAW,+CACXkE,aAAc,QAEhBC,eAAgB,CACd1C,OAAQ,QAEV2C,QAAS,CACPzD,QAAS,OACTU,cAAe,SACf8B,WAAY,UAEdkB,MAAO,CACL1D,QAAS,QAEX2D,OAAQ,CACNN,OAAQ,OACR3D,UAAW,UAEbkE,UAAW,CACTC,UAAW,IACXhD,MAAO,OACPwC,OAAQ,UAEVS,iBAAkB,CAChBC,UAAW7E,EAAMY,QAAQ,QAoLdkE,MAhLKA,KAClB,MAAMhD,EAAUhC,KACV,cAAEiF,GAAkBC,cACpBjD,EAAWC,eACViD,EAAcC,GAAmBC,mBAAS,OAC1CC,EAASC,GAAcF,mBAAS,OAChCG,EAAWC,GAAgBJ,oBAAS,IACpCK,EAAOC,GAAYN,mBAAS,OAC5BO,EAAMC,GAAWR,mBAAS,MAC3BS,EAAWC,iBAAO,MAClBC,EAAiBD,iBAAO,MAkCxBE,EAAgBC,IACpB,MAAMC,EAAOD,EAAEE,OAAOC,MAAM,GAC5BjB,EAAgBe,GAChBZ,EAAWe,IAAIC,gBAAgBJ,IA9BhBK,WACff,GAAa,GACbE,EAAS,MAET,IACE,MAAMc,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQR,GAGxB,MAAMS,QAAYC,MAAM,mCAADxF,OAAoC4D,GAAiB,CAC1E6B,OAAQ,OACRC,KAAMN,IAGR,IAAKG,EAAII,GACP,MAAM,IAAIC,MAAM,8CAGlB,MAAMC,QAAeN,EAAIO,OACzBtB,EAAQqB,EACV,CAAE,MAAOE,GACPzB,EAASyB,EAAIC,QACf,CAAC,QACC5B,GAAa,EACf,GAOA6B,CAASnB,EAAK,EAkBhB,OARAoB,qBAAU,KAENhC,EADEJ,EACSmB,IAAIC,gBAAgBpB,GAEpB,KACb,GACC,CAACA,IAGF9C,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAACC,IAAM,CAACC,SAAS,SAASC,UAAWZ,EAAQ7B,OAAOqC,SAClDH,eAACQ,IAAO,CAAAL,SAAA,CACNC,cAACkB,IAAU,CAAC6D,KAAK,QAAQlH,MAAM,UAAU,aAAW,OAAOuD,QAASA,IAAM5B,GAAU,GAAGO,SACrFC,cAACgF,IAAa,MAEhBhF,cAACK,IAAU,CAACF,UAAWZ,EAAQmC,KAAMpB,QAAQ,KAAKC,QAAM,EAAAR,SAAC,6BAGzDC,cAAA,OAAKG,UAAWZ,EAAQzB,OACxBkC,cAACQ,IAAM,CAACC,IAAKC,SAGjBV,cAACW,IAAS,CAACC,UAAU,EAAOT,UAAWZ,EAAQb,cAAeuG,gBAAc,EAAAlF,SAC1EC,cAACa,IAAI,CAACC,WAAS,EAACtC,eAAe,SAASuC,WAAW,SAAS1C,QAAS,EAAE0B,SACrEC,cAACa,IAAI,CAACG,MAAI,EAACC,GAAI,GAAGlB,SAChBH,eAACsF,IAAI,CAAC/E,UAAS,GAAAvB,OAAKW,EAAQoC,UAAS,KAAA/C,OAAKiE,EAAmC,GAAzBtD,EAAQwC,gBAAsBhC,SAAA,CAC/E8C,GACC7C,cAACmF,IAAc,CAAApF,SACbC,cAACoF,IAAS,CACRC,UAAU,MACVC,MAAOzC,EACP7E,MAAM,iBACNmC,UAAWZ,EAAQ4C,eAIvBU,GACA7C,cAACuF,IAAW,CAACpF,UAAWZ,EAAQyC,QAAQjC,SACtCH,eAAA,OAAK4F,MAAO,CAAEjH,QAAS,OAAQC,eAAgB,SAAU8D,UAAW,QAASvC,SAAA,CAC3EC,cAACkB,IAAU,CAACE,QArFJqE,KACxBlC,EAAemC,QAAQC,aAAa,UAAW,eAC/CpC,EAAemC,QAAQE,OAAO,EAmF0B/H,MAAM,UAASkC,SACrDC,cAAC6F,IAAa,CAACC,SAAS,YAE1B9F,cAAA,SACE+F,IAAKxC,EACLyC,KAAK,OACLC,OAAO,UACPC,QAAQ,cACR/F,UAAWZ,EAAQ0C,MACnBkE,SAAU3C,IAEZxD,cAAA,SACE+F,IAAK1C,EACL2C,KAAK,OACLC,OAAO,UACP9F,UAAWZ,EAAQ0C,MACnBkE,SAAU3C,IAEZxD,cAACkB,IAAU,CAACE,QAASA,IAAMiC,EAASqC,QAAQE,QAAS/H,MAAM,UAASkC,SAClEC,cAACoG,IAAe,CAACN,SAAS,iBAKlClG,eAAA,OAAKO,UAAWZ,EAAQ8C,iBAAiBtC,SAAA,CACxCoD,GACCnD,cAACuF,IAAW,CAACpF,UAAWZ,EAAQ2C,OAAOnC,SACrCC,cAACqG,IAAc,CAAChB,UAAWiB,IAAMvG,SAC/BH,eAAC2G,IAAK,CAACC,KAAK,QAAOzG,SAAA,CACjBC,cAACyG,IAAS,CAAA1G,SACRH,eAAC8G,IAAQ,CAAA3G,SAAA,CACPC,cAAC2G,IAAS,CAAA5G,SAAC,UACXC,cAAC2G,IAAS,CAACC,MAAM,QAAO7G,SAAC,oBAG7BC,cAAC6G,IAAS,CAAA9G,SACRH,eAAC8G,IAAQ,CAAA3G,SAAA,CACPC,cAAC2G,IAAS,CAAA5G,SAAEoD,EAAK2D,QACjBlH,eAAC+G,IAAS,CAACC,MAAM,QAAO7G,SAAA,EAAiC,IAA9BgH,WAAW5D,EAAK6D,aAAmBC,QAAQ,GAAG,mBAOpFlE,GACCnD,eAAC2F,IAAW,CAACpF,UAAWZ,EAAQ2C,OAAOnC,SAAA,CACrCC,cAACkH,IAAgB,CAACrJ,MAAM,cACxBmC,cAACK,IAAU,CAACC,QAAQ,YAAWP,SAAC,qBAGnCkD,GACCjD,cAACuF,IAAW,CAACpF,UAAWZ,EAAQ2C,OAAOnC,SACrCC,cAACK,IAAU,CAACxC,MAAM,QAAQyC,QAAQ,KAAIP,SACnCkD,OAILE,GAAQF,IACRjD,cAACuF,IAAW,CAACpF,UAAWZ,EAAQ2C,OAAOnC,SACrCC,cAACmH,IAAM,CACL7G,QAAQ,YACRzC,MAAM,UACNuD,QA7GAgG,KAChBzE,EAAgB,MAChBG,EAAW,MACXM,EAAQ,MACRF,EAAS,KAAK,EA0GEmE,UAAWrH,cAACsH,IAAS,IAAIvH,SAC1B,0BAUA,ECpOnB,MAAMwH,EAAqBA,KACzB,MAAM,cAAE/E,GAAkBC,cAC1B,OAAOzC,cAACuC,EAAW,CAACC,cAAeA,GAAiB,EAGvCgF,MAjBf,WACE,OACExH,cAACyH,IAAM,CAAA1H,SACLH,eAAC8H,IAAM,CAAA3H,SAAA,CACLC,cAAC2H,IAAK,CAACC,KAAK,mBAAmBC,QAAS7H,cAACV,EAAc,MACvDU,cAAC2H,IAAK,CAACC,KAAK,+BAA+BC,QAAS7H,cAACuH,EAAkB,MACvEvH,cAAC2H,IAAK,CAACC,KAAK,IAAIC,QAAS7H,cAACV,EAAc,MAAO,QAIvD,ECHewI,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASC,OACPzI,cAACH,IAAM6I,WAAU,CAAA3I,SACfC,cAACwH,EAAG,MAENmB,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.523b39de.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/PlantIcon1.eeefa143.png\";","export default __webpack_public_path__ + \"static/media/PlantIcon2.0a7c1dcf.png\";","export default __webpack_public_path__ + \"static/media/PlantIcon3.62418564.png\";","export default __webpack_public_path__ + \"static/media/PlantIcon4.b66f253c.png\";","export default __webpack_public_path__ + \"static/media/backgroundImage.b58906be.png\";","export default __webpack_public_path__ + \"static/media/logo.5933b895.PNG\";","import React from \"react\";\r\nimport { Container, Grid, IconButton, Typography, AppBar, Toolbar, Avatar } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\r\nimport PlantIcon1 from \"./plantIcons/PlantIcon1.png\";\r\nimport PlantIcon2 from \"./plantIcons/PlantIcon2.png\";\r\nimport PlantIcon3 from \"./plantIcons/PlantIcon3.png\";\r\nimport PlantIcon4 from \"./plantIcons/PlantIcon4.png\";\r\nimport backgroundImage from \"./backgroundImage.png\";\r\nimport cblogo from \"./logo.PNG\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appbar: {\r\n    background: '#009900',\r\n    boxShadow: 'none',\r\n    color: 'white'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    fontWeight: 'Open Sans',\r\n    color: 'white', \r\n  },\r\n  header: {\r\n    marginBottom: theme.spacing(2),\r\n    color: 'white',\r\n    textAlign: 'center',\r\n  },\r\n  buttonContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    gap: theme.spacing(2),\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n    minHeight: \"100vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  plantIcon: {\r\n    width: 150, \r\n    height: 150, \r\n  },\r\n}));\r\n\r\nconst ModelSelection = () => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n  const handleModelSelect = (modelId) => {\r\n    navigate(`/image-upload/${modelId}`); // Navigate to ImageUpload with selected model\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n              Plant Diseases Detection\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <Avatar src={cblogo}></Avatar>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"xl\" className={classes.mainContainer}>\r\n        <Grid container spacing={2} justifyContent=\"center\" alignItems=\"flex-start\" className={classes.buttonContainer}>\r\n          <Grid item xs={12} className={classes.header}>\r\n            <Typography variant=\"h5\">\r\n              Choose Your Plant \r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton className={classes.circularButton} onClick={() => handleModelSelect(\"model1\")} aria-label=\"model1\">\r\n              <img src={PlantIcon1} alt=\"Model 1\" className={classes.plantIcon} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton className={classes.circularButton} onClick={() => handleModelSelect(\"model2\")} aria-label=\"model2\">\r\n              <img src={PlantIcon2} alt=\"Model 2\" className={classes.plantIcon} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton className={classes.circularButton} onClick={() => handleModelSelect(\"model3\")} aria-label=\"model3\">\r\n              <img src={PlantIcon3} alt=\"Model 3\" className={classes.plantIcon} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton className={classes.circularButton} onClick={() => handleModelSelect(\"model4\")} aria-label=\"model4\">\r\n              <img src={PlantIcon4} alt=\"Model 4\" className={classes.plantIcon} />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ModelSelection;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Paper, CardActionArea, CardMedia, Grid, TableContainer, Table, TableBody, TableHead, TableRow, TableCell, Button, CircularProgress, IconButton } from \"@material-ui/core\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport cblogo from \"./logo.PNG\";\r\nimport backgroundImage from \"./backgroundImage.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  text: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n  },\r\n  appbar: {\r\n    background: '#009900',\r\n    boxShadow: 'none',\r\n    color: 'white'\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    height: \"93vh\",\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    maxWidth: 400,\r\n    backgroundColor: 'transparent',\r\n    boxShadow: '0px 9px 70px 0px rgb(0 0 0 / 30%) !important',\r\n    borderRadius: '15px',\r\n  },\r\n  imageCardEmpty: {\r\n    height: 'auto',\r\n  },\r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  detail: {\r\n    margin: \"auto\",\r\n    textAlign: 'center',\r\n  },\r\n  cardMedia: {\r\n    maxHeight: 300,\r\n    width: 'auto',\r\n    margin: '0 auto',\r\n  },\r\n  resultsContainer: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst ImageUpload = () => {\r\n  const classes = useStyles();\r\n  const { selectedModel } = useParams();\r\n  const navigate = useNavigate();\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [preview, setPreview] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState(null);\r\n  const inputRef = useRef(null);\r\n  const cameraInputRef = useRef(null);\r\n\r\n  const handleCameraClick = () => {\r\n    cameraInputRef.current.setAttribute(\"capture\", \"environment\");\r\n    cameraInputRef.current.click();\r\n  };\r\n\r\n  const sendFile = async (file) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      // Replace `localhost` with your computer's IP address\r\n      const res = await fetch(`http://192.168.1.6:8000/predict/${selectedModel}`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to process image. Please try again.\");\r\n      }\r\n\r\n      const result = await res.json();\r\n      setData(result);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const onSelectFile = (e) => {\r\n    const file = e.target.files[0];\r\n    setSelectedFile(file);\r\n    setPreview(URL.createObjectURL(file));\r\n    sendFile(file);\r\n  };\r\n\r\n  const clearData = () => {\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n    setData(null);\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedFile) {\r\n      setPreview(URL.createObjectURL(selectedFile));\r\n    } else {\r\n      setPreview(null);\r\n    }\r\n  }, [selectedFile]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"back\" onClick={() => navigate(-1)}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography className={classes.text} variant=\"h6\" noWrap>\r\n            Plant Diseases Detection\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <Avatar src={cblogo} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth={false} className={classes.mainContainer} disableGutters>\r\n        <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Card className={`${classes.imageCard} ${!preview ? classes.imageCardEmpty : ''}`}>\r\n              {preview && (\r\n                <CardActionArea>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    image={preview}\r\n                    title=\"Uploaded Image\"\r\n                    className={classes.cardMedia}\r\n                  />\r\n                </CardActionArea>\r\n              )}\r\n              {!preview && (\r\n                <CardContent className={classes.content}>\r\n                  <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\r\n                    <IconButton onClick={handleCameraClick} color=\"primary\">\r\n                      <CameraAltIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                    <input\r\n                      ref={cameraInputRef}\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      capture=\"environment\"\r\n                      className={classes.input}\r\n                      onChange={onSelectFile}\r\n                    />\r\n                    <input\r\n                      ref={inputRef}\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      className={classes.input}\r\n                      onChange={onSelectFile}\r\n                    />\r\n                    <IconButton onClick={() => inputRef.current.click()} color=\"primary\">\r\n                      <CloudUploadIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                  </div>\r\n                </CardContent>\r\n              )}\r\n              <div className={classes.resultsContainer}>\r\n              {data && (\r\n                <CardContent className={classes.detail}>\r\n                  <TableContainer component={Paper}>\r\n                    <Table size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Label</TableCell>\r\n                          <TableCell align=\"right\">Confidence</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell>{data.class}</TableCell>\r\n                          <TableCell align=\"right\">{(parseFloat(data.confidence) * 100).toFixed(2)}%</TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </CardContent>\r\n              )}\r\n              {isLoading && (\r\n                <CardContent className={classes.detail}>\r\n                  <CircularProgress color=\"secondary\" />\r\n                  <Typography variant=\"subtitle1\">Processing...</Typography>\r\n                </CardContent>\r\n              )}\r\n              {error && (\r\n                <CardContent className={classes.detail}>\r\n                  <Typography color=\"error\" variant=\"h6\">\r\n                    {error}\r\n                  </Typography>\r\n                </CardContent>\r\n              )}\r\n              {(data || error) && (\r\n                <CardContent className={classes.detail}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={clearData}\r\n                    startIcon={<ClearIcon />}\r\n                  >\r\n                    Clear\r\n                  </Button>\r\n                </CardContent>\r\n              )}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes, useParams } from \"react-router-dom\";\nimport ModelSelection from \"./ModelSelection\";\nimport ImageUpload from \"./ImageUpload\";\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/model-selection\" element={<ModelSelection />} />\n        <Route path=\"/image-upload/:selectedModel\" element={<ImageUploadWrapper />} />\n        <Route path=\"/\" element={<ModelSelection />} /> {/* Default route */}\n      </Routes>\n    </Router>\n  );\n}\n\nconst ImageUploadWrapper = () => {\n  const { selectedModel } = useParams();\n  return <ImageUpload selectedModel={selectedModel} />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}